holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, utilities, 30)
MNL_holdout_compare <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
fit_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE = mean(abs(result$est_pred - result$sim_pred))
)
return(list(fit_detail = result, fit_stats = fit_stats))
}
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, utilities, 30)
MNL_holdout_compare <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
fit_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE = mean(abs(result$est_pred - result$sim_pred))
)
return(list(fit_stats = fit_stats, fit_detail = result))
}
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, utilities, 30)
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, sim_pop, 30)
cor(est_utilities, sim_pop)
cor(as.vector(est_utilities), as.vector(sim_pop))
plot(result$sim_choice,result$est_pred)
plot(result$sim_pred,result$est_pred)
cor(result$sim_pred,result$est_pred)
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
? plot
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Utility Comparison", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covaraincen Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
MNL_holdout_compare <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
holdout_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_probs = cor(result$sim_pred,result$est_pred)
)
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
sd_utils <- data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd))
)
plot(result$sim_pred,result$est_pred)
cor(result$sim_pred,result$est_pred)
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, fit_detail = result))
}
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, utilities, 30)
MNL_holdout_compare <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
holdout_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_probs = cor(result$sim_pred,result$est_pred)
)
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
sd_utils = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd))
)
cor(result$sim_pred,result$est_pred)
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, fit_detail = result))
}
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, utilities, 30)
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
sd_utils = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
mean_utils = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities))
)
plot(utility_stats$mean_utils)
plot(utility_stats$mean_utils, main = "Compare Means of Utilities")
plot(utility_stats$sd_utils, main = "Compare Std Deviations of Utilities")
sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,]))
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_utils, main = "Compare Means of Utilities")
plot(utility_stats$mean_vars, main = "Compare Means of Utilities")
plot(utility_stats$sd_utils, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Respondent Utilities")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent Utilities")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
MNL_holdout_compare <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
holdout_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_probs = cor(result$sim_pred,result$est_pred)
)
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, holdout_detail = result))
}
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, sim_pop, 30)
nholdouts <- NULL
nholdouts >0
MNL_holdout_compare <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- NULL; holdout_detail <- NULL
if (nholdouts > 0){
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
holdout_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_probs = cor(result$sim_pred,result$est_pred)
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, holdout_detail = result))
}
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, sim_pop, 30)
holdout_fit <- MNL_holdout_compare(data_stan, sim_pop, utilities, 30)
compare_utilities <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(row_cor = sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- NULL; holdout_detail <- NULL
if (nholdouts > 0){
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = sample((1:data_stan$T)[data_stan$task_individual != i], nholdouts))
}))
holdout_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_probs = cor(result$sim_pred,result$est_pred)
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, holdout_detail = result))
}
holdout_fit <- compare_utilities(data_stan, sim_pop, utilities, 30)
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
nholdouts
nholdouts <- 30
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
fixed_tasks
tasks_resp <- (1:data_stan$T)[[data_stan$task_individual != i]]
tasks_resp <- (1:data_stan$T)[data_stan$task_individual != i]
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
}))
View(result)
MNL_holdout_compare_one <- function(data_stan, sim_utility, est_utility, id, hold_tasks){
# Compare simulated and estimated utility (1 respondent) on holdout tasks
result <- do.call(rbind, lapply(hold_tasks,
function(t){
X <- data_stan$ind[data_stan$start[t]:data_stan$end[t],]
U <- X %*% sim_utility
sim_choice <- est_choice <- rep(0, length(U))
sim_pred <- exp(U)/sum(exp(U))
sim_choice[which.max(U)] <- 1
U <- X %*% est_utility
est_pred <- exp(U)/sum(exp(U))
est_choice[which.max(U)] <- 1
return(data.frame(id = id, task = t, concept = 1:length(U),
sim_pred = sim_pred, sim_choice = sim_choice,
est_pred = est_pred, est_choice = est_choice))
}
))
return(result)
}
utilities <- sim_pop + matrix(rnorm(600 * 21)/5, 600, 21)
plot(as.vector(sim_pop), as.vector(utilities), xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(utilities)), xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(utilities)), xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
# Get holdouts each respondent
compare_utilities <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(row_cor = sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- NULL; holdout_detail <- NULL
if (nholdouts > 0){
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
}))
holdout_stats <- list(
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_probs = cor(result$sim_pred,result$est_pred)
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, holdout_detail = result))
}
holdout_fit <- compare_utilities(data_stan, sim_pop, utilities, 30)
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
}))
View(result)
? aggregate
sim_pred_agg <- aggregate(result$sim_pred, list(result$task, result$concept))
sim_pred_agg <- aggregate(result$sim_pred, list(result$task, result$concept), FUN = mean)
View(sim_pred_agg)
sim_pred_agg <- aggregate(result$sim_pred, list(result$concept, result$task), FUN = mean)
View(sim_pred_agg)
sim_pred_agg <- sqldf("select task, concept, mean(sim_pred) as sim_pred, mean(est_pred) as est_pred from result group by
task, concept")
library(sqldf)
sim_pred_agg <- sqldf("select task, concept, mean(sim_pred) as sim_pred, mean(est_pred) as est_pred from result group by
task, concept")
sim_pred_agg <- sqldf("select task, concept, average(sim_pred) as sim_pred, average(est_pred) as est_pred from result group by
task, concept")
sim_pred_agg <- sqldf("select task, concept, avg(sim_pred) as sim_pred, avg(est_pred) as est_pred from result group by
task, concept")
View(sim_pred_agg)
holdout_stats <- holdout_detail <- holdout_agg <- NULL
MAE_agg = mean(abs(sim_pred_agg$sim_pred - sim_pred_agg$est_pred))
plot(sim_pred_agg$sim_pred, sim_pred_agg$est_pred, main = "Compare Aggregate Shares of Tasks",
xlab = "Holdout Task Shares from Simulated Utilities",
ylab = "Holdout Task Shares from Estimated Utilities")
plot(sim_pred_agg$sim_pred, sim_pred_agg$est_pred, main = "Compare Aggregate Shares of Holdout Tasks",
xlab = "Agg Shares from Simulated Utilities",
ylab = "Agg Shares from Estimated Utilities")
compare_utilities <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(row_cor = sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- holdout_detail <- holdout_agg <- NULL
if (nholdouts > 0){
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
}))
sim_pred_agg <- sqldf("select task, concept, avg(sim_pred) as sim_pred, avg(est_pred) as est_pred from result group by
task, concept")
plot(sim_pred_agg$sim_pred, sim_pred_agg$est_pred, main = "Compare Aggregate Shares of Holdout Tasks",
xlab = "Agg Shares from Simulated Utilities",
ylab = "Agg Shares from Estimated Utilities")
holdout_stats <- list(
MAE_agg = mean(abs(sim_pred_agg$sim_pred - sim_pred_agg$est_pred)),
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_resp_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_resp_probs = cor(result$sim_pred,result$est_pred),
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, holdout_agg = sim_pred_agg, holdout_detail = result))
}
holdout_fit <- compare_utilities(data_stan, sim_pop, utilities, 30)
compare_utilities <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(row_cor = sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- holdout_detail <- holdout_agg <- NULL
if (nholdouts > 0){
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
}))
sim_pred_agg <- sqldf("select task, concept, avg(sim_pred) as sim_pred, avg(est_pred) as est_pred from result group by
task, concept")
plot(sim_pred_agg$sim_pred, sim_pred_agg$est_pred, main = "Compare Aggregate Shares of Holdout Tasks",
xlab = "Agg Shares from Simulated Utilities",
ylab = "Agg Shares from Estimated Utilities")
holdout_stats <- list(
MAE_agg = mean(abs(sim_pred_agg$sim_pred - sim_pred_agg$est_pred)),
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_resp_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_resp_probs = cor(result$sim_pred,result$est_pred)
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, holdout_agg = sim_pred_agg, holdout_detail = result))
}
holdout_fit <- compare_utilities(data_stan, sim_pop, utilities, 30)
look <- holdout_fit$holdout_detail
View(look)
compare_utilities <- function(data_stan, sim_pop, est_utilities, nholdouts){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(row_cor = sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- holdout_detail <- holdout_agg <- NULL
if (nholdouts > 0){
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(fixed_tasks, (1:data_stan$T)[data_stan$task_individual != i]))
}))
sim_pred_agg <- sqldf("select task, concept, avg(sim_pred) as sim_pred, avg(est_pred) as est_pred, sum(1) as N from result group by
task, concept")
plot(sim_pred_agg$sim_pred, sim_pred_agg$est_pred, main = "Compare Aggregate Shares of Holdout Tasks",
xlab = "Agg Shares from Simulated Utilities",
ylab = "Agg Shares from Estimated Utilities")
holdout_stats <- list(
MAE_agg = mean(abs(sim_pred_agg$sim_pred - sim_pred_agg$est_pred)),
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_resp_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_resp_probs = cor(result$sim_pred,result$est_pred)
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, detail_agg = sim_pred_agg, detail_resp = result))
}
holdout_fit <- compare_utilities(data_stan, sim_pop, utilities, 30)
look <- holdout_fit$detail_agg
View(look)
compare_utilities <- function(data_stan, sim_pop, est_utilities, tasks_holdout = NULL){
if (sum(dim(sim_pop) != dim(est_utilities)) > 0){
stop("Fatal Error: simulated and estimated utilities must be same size (rows and cols)")
}
plot(as.vector(sim_pop), as.vector(est_utilities), main = "Compare Utilities", xlab = "Simulated Population Utilities", ylab = "Estimated Utilities")
plot(as.vector(cor(sim_pop)), as.vector(cor(est_utilities)), main = "Compare Correlation of Utilities", xlab = "Simulated Population Cor", ylab = "Estimated Correlation")
plot(as.vector(cov(sim_pop)), as.vector(cov(est_utilities)), main = "Compare Covariance of Utilities", xlab = "Simulated Population Cov", ylab = "Estimated Covaraince")
utility_stats <- list(
MAE_utils = mean(abs(est_utilities - sim_pop)),
cor_utils = cor(as.vector(est_utilities), as.vector(sim_pop)),
mean_vars = data.frame(sim_pop = colMeans(sim_pop), est_utils = colMeans(est_utilities)),
sd_vars = data.frame(sim_pop = apply(sim_pop, 2, sd), est_utils = apply(est_utilities, 2, sd)),
sd_rows = data.frame(sim_pop = apply(sim_pop, 1, sd), est_utils = apply(est_utilities, 1, sd)),
row_cor = data.frame(row_cor = sapply(1:nrow(sim_pop), function(i) cor(sim_pop[i,], est_utiities[i,])))
)
plot(utility_stats$mean_vars, main = "Compare Means of Utility Variables")
plot(utility_stats$sd_vars, main = "Compare Std Deviations of Utility Variables")
plot(utility_stats$sd_rows, main = "Compare Std Deviations of Each Respondent's Utilities")
holdout_stats <- holdout_detail <- holdout_agg <- NULL
if (!is.null(tasks_holdout)){
fixed_tasks <- sample((1:data_stan$T), nholdouts) # Fixed tasks
result <- do.call(rbind, lapply(1:nrow(sim_pop), function(i){
MNL_holdout_compare_one(data_stan, sim_pop[i,], est_utilities[i,],
id = i,
hold_tasks = intersect(tasks_holdout, (1:data_stan$T)[data_stan$task_individual != i]))
}))
sim_pred_agg <- sqldf("select task, concept, avg(sim_pred) as sim_pred, avg(est_pred) as est_pred, sum(1) as N from result group by
task, concept")
plot(sim_pred_agg$sim_pred, sim_pred_agg$est_pred, main = "Compare Aggregate Shares of Holdout Tasks",
xlab = "Agg Shares from Simulated Utilities",
ylab = "Agg Shares from Estimated Utilities")
holdout_stats <- list(
MAE_agg = mean(abs(sim_pred_agg$sim_pred - sim_pred_agg$est_pred)),
hit_rate = sum(result$sim_choice * result$est_choice)/sum(result$sim_choice),
rlh = exp(sum(result$sim_choice * log(result$est_pred))/sum(result$sim_choice)),
MAE_resp_probs = mean(abs(result$est_pred - result$sim_pred)),
cor_resp_probs = cor(result$sim_pred,result$est_pred)
)
}
return(list(holdout_stats = holdout_stats, utility_stats = utility_stats, detail_agg = sim_pred_agg, detail_resp = result))
}
holdout_fit <- compare_utilities(data_stan, sim_pop, utilities,
tasks_holdout = sample(1:data_stan$T, 30)) # Fixed tasks)
