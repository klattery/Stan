library(readxl) # Read excel
library(cmdstanr) # Interface to Stan
library(posterior) # Process Stan draws
library(doParallel) # R Multi-threading for EB
source("https://raw.githubusercontent.com/klattery/Estimation-Ecosystem/master/EE_Functions_Stan.R")
# Specify directory for data and read in
dir_data <- "C:/Users/K.Lattery/SKIM/Methodology & Analytics - I91-1114-20 Master Analysis/CBC/Stan"
data_file <- "Data_Train.csv"
specs_file <- "Coding_and_Constraints_Sawtooth.xlsx" # Coding and constraints file
out_prefix <- "F9999_v1" # Your name for output files (prefix)
data_in <- read.csv(file.path(dir_data,data_file))
att_coding <- data.frame(read_xlsx(file.path(dir_data,specs_file), sheet = "Att_Coding", col_types = c("text","text","numeric")))
paircon_in <- data.frame(read_xlsx(file.path(dir_data,specs_file), sheet = "Pair_Constraints",col_types = c("text","numeric","numeric")))
# Directory for results, stan csv results. For AWS usually all the same as dir_data
dir_work <- dir_data
dir_stanout <- "C:/StanRuns" # On PC this should be folder that does not sync
# Specify multi-threading Stan and R
threads <- list(tot_chains = 2, # Typically 2
parallel_chains = 2, # Typically 2
threads_per_chain = 8) # Depends on Cores, 8 to 16 is desirable
r_cores <- min(12,max(detectCores() -1,1)) # Number of cores to use for R
# Run this
paircon <- remove_implicits(paircon_in) # Remove rows that don't add info
indcode_spec <- indcode_spec_files(data_in, att_coding, paircon) # Code and constraints each attribute
indcode_list <- make_codefiles(indcode_spec) # Combine specifications above into one list
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
data_stan$splitsize <- round(.5 + data_stan$T/(4 * threads[[3]])) # For multi-threading 1 is Stan automatic
# Modeling parameters. Defaults are usually fine
data_model <- list(
iter_warmup = 400, # warmup of 400 is plenty
iter_sampling = 400, # sampling of 400 is plenty
df = 2,
prior_cov_scale = 1,
refresh = 10,
seed = 271,
init = .1,
agg_model = NULL,
tag = NULL
)
str(modifyList(data_stan, data_model))
#####  Specify Stan Model ###############
dir_stanmodel <- dir_work # Specify directory of stan model code
stan_file <- "BaseHB_wPairCon_v1.stan" # Specify name of stan file in directory above
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
stan_compile_and_est
#####  Specify Stan Model ###############
dir_stanmodel <- dir_work # Specify directory of stan model code
stan_file <- "BaseHB_wPairCon_v1.stan" # Specify name of stan file in directory above
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, STAN_CPP_OPTIMS = TRUE, CXXFLAGS = -mcpu=native))
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, STAN_CPP_OPTIMS = TRUE))
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, CXXFLAGS += -mcpu=native))
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, CXXFLAGS+=-mcpu=native))
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, cxxflags = "-march=native"))
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, cxxflags = "-mcpu=native"))
dir_stanmodel
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, cxxflags = "-mcpu=native"))
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE, cxxflags = "-march=native"))
cpp_options <- list(
"CXXFLAGS+= -O3 -march=native -mtune=native"
)
cmdstan_make_local(cpp_options = cpp_options)
rebuild_cmdstan()
cmdstan_version()
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list(stan_threads = TRUE))
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
stan_compile_and_est
HB_model <- cmdstan_model(file.path(dir_stanmodel,stan_file), quiet = TRUE, cpp_options = list("stan_threads = TRUE", "CXXFLAGS+= -O3 -march=native -mtune=native"))
cmdstan_path())
cmdstan_path()
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan.R', echo=TRUE)
indcode_spec <- indcode_spec_files(data_in, att_coding, paircon) # Code and constraints each attribute
indcode_list <- indcode_spec[sapply(indcode_spec, length) > 0] # remove NULL elements
lapply(indcode_list, x$levels)
lapply(indcode_list, levels)
lapply(indcode_list, function(x) x$levels)
lapply(indcode_list, function(x) is.null(x$levels))
levels <- lapply(indcode_list, function(x) x$levels)
x <- indocde_list[[1]]
x <- indcode_list[[1]]
ind_coded <- cbind(ind_coded, x$outcode)
ind_coded <- NULL
ind_levels <- NULL
ind_coded <- cbind(ind_coded, x$outcode)
col_beg <- 1 # code_matrix col
row_beg <- 1 # code_matrix row
col_end <- col_beg + ncol(x$code_matrix)
row_end <- row_beg + nrow(code_matrix)
row_end <- row_beg + nrow(x$code_matrix)
code_blocks <- matrix(0, nrow = length(indcode_list), ncol = 5)
# col_beg, col_end, row_beg, row_end, coded_beg
x <- indcode_list[[6]]
col_beg <- 1 # code_matrix col
row_beg <- 1 # code_matrix row
coded_beg <- 1 # column of coded data
code_blocks <- matrix(0, nrow = length(indcode_list), ncol = 5)
col_end <- col_beg + ncol(x$code_matrix) - 1
row_end <- row_beg + nrow(x$code_matrix) - 1
x$code_matrix
col_beg <- col_end + 1 # new col_beg
row_beg <- row_end + 1 # new row_beg
coded_beg <- coded_beg + ncol(x$code_matrix) # could also use x$outcode
# col_beg, col_end, row_beg, row_end, coded_beg
x <- indcode_list[[1]]
ind_levels <- cbind(ind_levels, x$levels)
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan2.R', echo=TRUE)
indcode_list <- make_codefiles(indcode_spec) # Combine specifications above into one list
# Converts list of codes to matrices:  # code_master, indcode, indprior
result <- list()
indcode_list <- indcode_spec[sapply(indcode_spec, length) > 0] # remove NULL elements
names(indcode_list) <- NULL # to avoid adding to vnames
# Create two files: coded and uncoded levels, and a combined version for R
ind_coded <- NULL # coded data
ind_levels <- NULL # uncoded (will be coded in Stan)
col_beg <- 1 # code_matrix col
row_beg <- 1 # code_matrix row
coded_beg <- 1 # column of coded data
code_blocks <- matrix(0, nrow = length(indcode_list), ncol = 5)
# col_beg, col_end, row_beg, row_end, coded_beg
for (i in 1:length(incode_list)){
x <- indcode_list[[i]]
col_end <- col_beg + ncol(x$code_matrix) - 1
row_end <- row_beg + nrow(x$code_matrix) - 1
if (is.null(x$levels)){
ind_coded <- cbind(ind_coded, x$outcode)
code[i,] <- c(col_beg, col_end, row_beg, row_end, coded_beg)
coded_beg <- coded_beg + ncol(x$code_matrix) # could also use x$outcode
} else {
ind_levels <- cbind(ind_levels, x$levels)
code[i,] <- c(col_beg, col_end, row_beg, row_end, 0) # 0 = not in coded file
}
col_beg <- col_end + 1 # next column of code_matrix
row_beg <- row_end + 1 # next row of code_matrix
}
# col_beg, col_end, row_beg, row_end, coded_beg
for (i in 1:length(indcode_list)){
x <- indcode_list[[i]]
col_end <- col_beg + ncol(x$code_matrix) - 1
row_end <- row_beg + nrow(x$code_matrix) - 1
if (is.null(x$levels)){
ind_coded <- cbind(ind_coded, x$outcode)
code[i,] <- c(col_beg, col_end, row_beg, row_end, coded_beg)
coded_beg <- coded_beg + ncol(x$code_matrix) # could also use x$outcode
} else {
ind_levels <- cbind(ind_levels, x$levels)
code[i,] <- c(col_beg, col_end, row_beg, row_end, 0) # 0 = not in coded file
}
col_beg <- col_end + 1 # next column of code_matrix
row_beg <- row_end + 1 # next row of code_matrix
}
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan2.R', echo=TRUE)
indcode_list <- make_codefiles(indcode_spec) # Combine specifications above into one list
look <- indcode_list$code_blocks
View(look)
#####  Specify Stan Model ###############
dir_stanmodel <- "C:/Users/K.Lattery/Documents/GitHub/Stan" # Specify directory of stan model code
stan_file <- "BaseHB_wPairCon_v2.1.stan" # Specify name of stan file in directory above
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
ind_coded <- NULL
ncol(ind_coded)
test <- matrix(10,0)
test <- matrix(0,10,0)
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan2.R', echo=TRUE)
indcode_list <- make_codefiles(indcode_spec) # Combine specifications above into one list
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan2.R', echo=TRUE)
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan2.R', echo=TRUE)
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
prep_file_stan
source('~/GitHub/Estimation-Ecosystem/EE_Functions_Stan2.R', echo=TRUE)
prep_file_stan
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
data_stan$splitsize <- round(.5 + data_stan$T/(4 * threads[[3]])) # For multi-threading 1 is Stan automatic
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
stan_file <- "BaseHB_wPairCon_v2.1_test.stan" # Specify name of stan file in directory above
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
table(data_stan$ind_levels)
table(data_stan$ind_levels[,1])
table(data_stan$ind_levels[,2])
table(data_stan$ind_levels[,3])
table(data_stan$ind_levels[,4])
table(data_stan$ind_levels[,5])
look <- data_stan$code_blocks
View(look)
table(indcode_spec$Att.3...Number.of.Days.$levels)
table(indcode_list$ind_levels[,3])
look <- data_stan$ind_levels
look2 <- indcode_list$ind_levels
View(look)
View(look2)
table(data_stan$ind_levels[,3])
table(data_stan$ind_levels[,1])
table(data_stan$ind_levels[,2])
table(data_stan$ind_levels[,3])
table(data_stan$ind_levels[,4])
table(data_stan$ind_levels[,5])
look <- data_stan$code_blocks
View(look)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
rstan:::rstudio_stanc("BaseHB_wPairCon_v2.1.stan")
stan_file <- "BaseHB_wPairCon_v2.1.stan" # Specify name of stan file in directory above
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
View(look)
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Check Convergence, Export Files  ###############
checkconverge_export(data_stan, nchains = threads[[1]], dir_stanout, outname, out_prefix, dir_work, r_cores)
eb_betas_est(data_stan, draws_beta, colMeans(utilities), r_cores, out_prefix, dir_work, cov_scale = 1)
source("https://raw.githubusercontent.com/klattery/Estimation-Ecosystem/master/EE_Functions_Stan.R")
eb_betas_est
library(readxl) # Read excel
library(cmdstanr) # Interface to Stan
library(posterior) # Process Stan draws
library(doParallel) # R Multi-threading for EB
source("https://raw.githubusercontent.com/klattery/Estimation-Ecosystem/master/EE_Functions_Stan.R")
# Specify directory for data and read in
dir_data <- "C:/Users/K.Lattery/SKIM/Methodology & Analytics - I91-1114-20 Master Analysis/CBC/Stan"
data_file <- "Data_Train.csv"
specs_file <- "Coding_and_Constraints_Sawtooth.xlsx" # Coding and constraints file
out_prefix <- "F9999_v1" # Your name for output files (prefix)
# Read files in
data_in <- read.csv(file.path(dir_data,data_file))
att_coding <- data.frame(read_xlsx(file.path(dir_data,specs_file), sheet = "Att_Coding", col_types = c("text","text","numeric")))
paircon_in <- data.frame(read_xlsx(file.path(dir_data,specs_file), sheet = "Pair_Constraints",col_types = c("text","numeric","numeric")))
# Directory for results, stan csv results. For AWS usually all the same as dir_data
dir_work <- dir_data
dir_stanout <- "C:/StanRuns" # On PC this should be folder that does not sync
# Specify multi-threading Stan and R
threads <- list(tot_chains = 2, # Typically 2
parallel_chains = 2, # Typically 2
threads_per_chain = 8) # Depends on Cores, 8 to 16 is desirable
r_cores <- min(12,max(detectCores() -1,1)) # Number of cores to use for R
# Run this
paircon <- remove_implicits(paircon_in) # Remove rows that don't add info
indcode_spec <- indcode_spec_files(data_in, att_coding, paircon) # Code and constraints each attribute
indcode_list <- make_codefiles(indcode_spec) # Combine specifications above into one list
look <- indcode_list$code_blocks
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
data_stan$splitsize <- round(.5 + data_stan$T/(4 * threads[[3]])) # For multi-threading 1 is Stan automatic
# Modeling parameters. Defaults are usually fine
data_model <- list(
iter_warmup = 400, # warmup of 400 is plenty
iter_sampling = 400, # sampling of 400 is plenty
df = 2,
prior_cov_scale = 1,
refresh = 10,
seed = 271,
init = .1,
agg_model = NULL,
tag = NULL
)
str(modifyList(data_stan, data_model))
#####  Specify Stan Model ###############
dir_stanmodel <- "C:/Users/K.Lattery/Documents/GitHub/Stan" # Specify directory of stan model code
stan_file <- "BaseHB_wPairCon_v2.1.stan" # Specify name of stan file in directory above
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Check Convergence, Export Files  ###############
checkconverge_export(data_stan, nchains = threads[[1]], dir_stanout, outname, out_prefix, dir_work, r_cores)
eb_betas_est(data_stan, draws_beta, colMeans(utilities), r_cores, out_prefix, dir_work, cov_scale = 1)
library(readxl) # Read excel
library(cmdstanr) # Interface to Stan
library(posterior) # Process Stan draws
library(doParallel) # R Multi-threading for EB
source("https://raw.githubusercontent.com/klattery/Estimation-Ecosystem/master/EE_Functions_Stan.R")
# Specify directory for data and read in
dir_data <- "C:/Users/K.Lattery/SKIM/Methodology & Analytics - I91-1114-20 Master Analysis/CBC/Stan"
data_file <- "Data_Train.csv"
specs_file <- "Coding_and_Constraints_Sawtooth.xlsx" # Coding and constraints file
out_prefix <- "F9999_v1" # Your name for output files (prefix)
# Read files in
data_in <- read.csv(file.path(dir_data,data_file))
att_coding <- data.frame(read_xlsx(file.path(dir_data,specs_file), sheet = "Att_Coding", col_types = c("text","text","numeric")))
paircon_in <- data.frame(read_xlsx(file.path(dir_data,specs_file), sheet = "Pair_Constraints",col_types = c("text","numeric","numeric")))
# Directory for results, stan csv results, stan model. For AWS usually all the same as dir_data
dir_work <- dir_data
dir_stanout <- "C:/StanRuns" # On PC this should be folder that does not sync
# Specify multi-threading Stan and R
threads <- list(tot_chains = 2, # Typically 2
parallel_chains = 2, # Typically 2
threads_per_chain = 8) # Depends on Cores, 8 to 16 is desirable
r_cores <- min(12,max(detectCores() -1,1)) # Number of cores to use for R
# Run this
paircon <- remove_implicits(paircon_in) # Remove rows that don't add info
indcode_spec <- indcode_spec_files(data_in, att_coding, paircon) # Code and constraints each attribute
indcode_list <- make_codefiles(indcode_spec) # Combine specifications above into one list
data_stan <- prep_file_stan(idtaskdep = data_in[,c(1,2,ncol(data_in))],
indcode_list)
data_stan$splitsize <- round(.5 + data_stan$T/(4 * threads[[3]])) # For multi-threading 1 is Stan automatic
# Modeling parameters. Defaults are usually fine
data_model <- list(
iter_warmup = 400, # warmup of 400 is plenty
iter_sampling = 400, # sampling of 400 is plenty
df = 2,
prior_cov_scale = 1,
refresh = 10,
seed = 271,
init = .1,
agg_model = NULL,
tag = NULL
)
str(modifyList(data_stan, data_model))
#####  Specify Stan Model ###############
dir_stanmodel <- dir_work # Specify directory of stan model code
stan_file <- "BaseHB_wPairCon_v1.stan" # Specify name of stan file in directory above
outname <- paste0(out_prefix, "_StanOut_",
format(Sys.time(), '%Y%m%d-%H%M%S')) # Base Name of Stan Output files
#####  Run Stan Model ###############
stan_compile_and_est(data_stan, data_model, dir_stanmodel, stan_file, outname, out_prefix, dir_work, threads)
#####  Check Convergence, Export Files  ###############
checkconverge_export(data_stan, nchains = threads[[1]], dir_stanout, outname, out_prefix, dir_work, r_cores)
eb_betas_est(data_stan, draws_beta, colMeans(utilities), r_cores, out_prefix, dir_work, cov_scale = 1)
